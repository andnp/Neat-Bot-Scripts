// ===== OPTIONAL CONFIGURATION PARAMETERS =====
// Extra resources to reserve (in addition to city's reserved resources)
//       food, wood, stone, iron, gold:
extra = [  10k,   10k,    10k,   10k,  100 ]

// How aggressive we want to be (lower number would increase trading gains at the cost of potentially slower trade execution)
aggr = 2%

// Only trade if we expect this much gain
gain = 2%

// ===== NOTHING TO CONFIGURE BELOW THIS LINE =====
delay = 0
config trade:0
comm = 0.5%
maxRes = 990B

label nextres
res = floor(random() * 4) // choose resource to trade randomly, helps with multiple trading running
resName = ResourceIntNames[res]

label check
ifgoto city.getBuildingLevel(23) < 2 end
if city.tradesArray.length > city.getBuildingLevel(23) - 2 execute "sleep " + delay
if city.tradesArray.length > city.getBuildingLevel(23) - 2 execute "canceltrade " + city.tradesArray[0].id
if city.tradesArray.length > city.getBuildingLevel(23) - 2 goto check

label notready
if !m_context.marketReady() goto notready
prices = [ Price(res, aggr), Price(res, 1 - aggr), Price(res, aggr) * (1 + comm), Price(res, 1 - aggr) * comm ]
resGold = city.reservedResource.gold + extra[4] + max(0, city.resource.gold - city.reservedResource.gold - extra[4]) * 0.8
canSell = (city.resource[resName].amount - city.reservedResource[resName] - extra[res]) * 0.8
sellLimit = (city.resource.gold - resGold) / prices[3]
if sellLimit < 1 sellLimit = min(max(1, (resGold - city.resource.gold) / prices[1] / 2), (city.resource.gold - 1) / prices[3]) // we are low on gold
sellVolume = floor(min(canSell, sellLimit, MAX_TRADE - max(0, floor(min(maxRes - city.resource[resName].amount, (city.resource.gold - resGold) / prices[2]))) / 3))
if sellVolume > 0 execute "sell " + res + " " + sellVolume + " " + prices[1]
buyVolume = floor(min(maxRes - city.resource[resName].amount, (city.resource.gold - resGold) / prices[2], MAX_TRADE))
if buyVolume > 0 execute "buy " + res + " " + buyVolume + " " + prices[0]
label end